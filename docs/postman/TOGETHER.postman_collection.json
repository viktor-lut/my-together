{
	"info": {
		"_postman_id": "10dbac0f-6d09-4051-b5d7-d819fa7f2b31",
		"name": "TOGETHER",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "USER",
			"item": [
				{
					"name": "USER Positive",
					"item": [
						{
							"name": "USER Positive POST Register",
							"item": [
								{
									"name": "Register - password length is 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ff2f73c-9c43-4bf1-b298-b7572bfe8397",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,11));",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"1234Aa\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"John Doe\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - password length is 124",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "267bbe12-873f-443b-96a0-7e49e8490ea8",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"pm.variables.set(\"userPassword\", \"A\".repeat(123) + '7');",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,11));",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"{{userPassword}}\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"John Doe\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - password contains special symbols (~!@#$%&*_:)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02fe795f-dd2e-4e6c-b22a-c0c3ec8edc36",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,11));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"~!@#$%&*_:G0\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"John Doe\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - password contains digitals (0-9) and one letter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02fe795f-dd2e-4e6c-b22a-c0c3ec8edc36",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,11));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"0123456789h\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"John Doe\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - password contains letters (a-z, A-Z) and one digital",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02fe795f-dd2e-4e6c-b22a-c0c3ec8edc36",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,11));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ9\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"John Doe\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - phone length is 12",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ff2f73c-9c43-4bf1-b298-b7572bfe8397",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,11));",
													"console.log(pm.variables.get(\"userPhone\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"1234Aa\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"John Doe\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - phone length is 13",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ff2f73c-9c43-4bf1-b298-b7572bfe8397",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,12));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"1234Aa\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"John Doe\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - name consists of 2 words (15 length each)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ff2f73c-9c43-4bf1-b298-b7572bfe8397",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,12));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"1234Aa\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"Ihjklogiuythjklk Jhjkloiuythjklo\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - name consists of 2 words (1 length each)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ff2f73c-9c43-4bf1-b298-b7572bfe8397",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@gmail.com\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,12));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"1234Aa\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"Y O\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - email ends on \"@mail.ru\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ff2f73c-9c43-4bf1-b298-b7572bfe8397",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@mail.ru\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,12));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"1234Aa\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"You Oou\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - email ends on \"@my.company.eu\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ff2f73c-9c43-4bf1-b298-b7572bfe8397",
												"exec": [
													"pm.variables.set(\"userEmail\", \"Ahjhj\" + new Date().getTime() + \"@my.company.eu\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,12));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"1234Aa\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"You Oou\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register - email comtains letters (a-z, A-Z) and digitals (0-9)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r        pm.response.to.have.status(201);\r});\r\rconst jsonData = pm.response.json(); \rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {                   \r    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t\r});\r\rpm.test(\"Payload is string and has the length 24\", function () {                   \r    pm.expect(jsonData.payload).to.be.a('string').to.have.lengthOf(24)\t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ff2f73c-9c43-4bf1-b298-b7572bfe8397",
												"exec": [
													"pm.variables.set(\"userEmail\", \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" + new Date().getTime() + \"@mycompany.eu\");",
													"pm.variables.set(\"userPhone\", \"+\" + new Date().getTime().toString().substring(0,12));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"1234Aa\",\n\t\"phone\": \"{{userPhone}}\",\n\t\"name\": \"You Oou\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"abfgc@gmail.com\",\n\t\"password\": \"abc123\"\n}"
								},
								"url": {
									"raw": "{{host}}/user/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json(); ",
											"",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"        pm.expect(jsonData.message).to.equal('User Get All')  \t",
											"});",
											"                  ",
											"pm.test(\"Payload is not empty array\", function () {",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
											"});",
											"",
											" pm.test(\"Each element in payload is a user\", function () {",
											"        for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].password).to.be.undefined;",
											"        pm.expect(jsonData.payload[i].emailConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].phoneConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].resetPassword.history).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].roles).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].active).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].email).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].phone).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].__v).to.equal(0) ;",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json(); ",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('User Get By Id')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"        for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].password).to.be.undefined;",
											"        pm.expect(jsonData.payload[i].emailConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].phoneConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].resetPassword.history).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].roles).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].active).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].email).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].phone).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].__v).to.equal(0) ;",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user/5cac10796d728800049e3330",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"5cac10796d728800049e3330"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34779d4a-a2ce-4179-bbea-2582d382876d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});\r\rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('User updated successfully')  \t\r});\r"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"abfgc@gmail.com\",\n\t\"password\": \"abc123\",\n\t\"phone\": \"+17075901867\",\n\t\"name\": \"John Doe\"\n}"
								},
								"url": {
									"raw": "{{host}}/user/5cac10796d728800049e3330",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"5cac10796d728800049e3330"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});   \r\rpm.test(\"Success is true\", function () {\r        pm.expect(jsonData.success).to.eql(true);\r        pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \rpm.expect(jsonData.message).to.equal('User deleted successfully')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user/5cac12806d728800049e335a",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"5cac12806d728800049e335a"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "USER Negative",
					"item": [
						{
							"name": "USER Negative GET By Id",
							"item": [],
							"_postman_isSubFolder": true
						},
						{
							"name": "USER Negative POST Register",
							"item": [
								{
									"name": "USER Negative POST name empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"      pm.response.to.have.status(404);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Success is false\", function () {",
													"  pm.expect(jsonData.success).to.eql(false);",
													"  pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {",
													"  pm.expect(jsonData.message).to.equal('User was not created');",
													"});",
													"",
													"pm.test(\"Correct payload message\", function () {",
													"  pm.expect(jsonData.payload).to.equal('User was not created');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38bfd207-406d-4c8e-aabc-871326a7880f",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"email\": \"{{userEmail}}\",\n   \"password\": \"abc123\",\n   \"phone\": \"+17075901867\",\n   \"name\": \"\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "USER Negative POST name incorrect cyrillic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Success is false\", function () {",
													"  pm.expect(jsonData.success).to.eql(false);",
													"  pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {",
													"  pm.expect(jsonData.message).to.equal('User was not created');",
													"});",
													"",
													"pm.test(\"Correct payload message\", function () {",
													"  pm.expect(jsonData.payload).to.equal('User was not created');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c57576d9-f874-4dbb-8b7a-1e82934aacb7",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"email\": \"{{userEmail}}\",\n   \"password\": \"abc123\",\n   \"phone\": \"+17075901867\",\n   \"name\": \"Петя Иванов\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' field is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88d651ac-e68a-4743-95d5-e0c0c1d9c928",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' field have array of strings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88d651ac-e68a-4743-95d5-e0c0c1d9c928",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": [\"+12345678901\", \"+12345678902\", \"+12345678903\"],\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' field is not string (is Number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "884ee86e-fb52-43c9-bbc4-5950e4d9d11b",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": 11234567890,\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' field is not string (is Bolean)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "884ee86e-fb52-43c9-bbc4-5950e4d9d11b",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": true,\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' field is not string (is Null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "884ee86e-fb52-43c9-bbc4-5950e4d9d11b",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": null,\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' field is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8c7aa14b-61d1-4faf-ba32-f976fae3470b",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' field is not unique",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"        pm.response.to.have.status(409);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User with this phone already exists')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "09f8b7a7-30c5-41ad-bd2c-1b6a4584f219",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"+12345678900\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' length 13(more than max lim)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69ee0a86-e38f-4bb6-84a3-5138e3f8eb24",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog132\",\n\t\"phone\": \"+012345678911\",\n\t\"name\": \"Super Woman\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' length 9 (less than min lim)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5615bb57-d735-4667-88ad-ffcf0d67ac0f",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"+12345678\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' length 1 (only '+')",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c45d6b6c-2713-475b-ad6c-d0e45757c83d",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"+\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' length 1 (one random spesial symbol)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5ed0c907-8deb-4904-bfc6-0d8f594978ec",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"_\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' length  (one digit)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26f62b90-a3b7-4d54-9324-1d1f362697ea",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"3\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' starts with digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "45a6d8c7-a0dd-45b1-bd9f-29da5aeaf691",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"312345678901\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' with any one letter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "586fda9a-4833-47de-b5c4-8f10d69bd631",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"+1234a567890\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' only 12 random letters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d7620c79-00f6-450e-b744-1f6c52d55b96",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"qwertyuiopas\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' starts with space",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "633f178f-cfdd-4515-9d32-4bfc97c53cf4",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \" +1234567890\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' space in end string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5d1b2d7b-1004-4315-93fe-aff160018be3",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"+1234547890 \",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' space inside the string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "239ae118-8f0f-4102-9cea-8c8f9142f9b0",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"+12345 47890\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register-'phone' spesial symbol inside the string(random)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fd2ecf-89c9-4c6a-bc17-878704a7658f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"        pm.response.to.have.status(404);",
													"});",
													"const jsonData = pm.response.json(); ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {                   ",
													"    pm.expect(jsonData.message).to.equal('User was not created')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d24ef6c2-9f73-4e69-8646-96c9a8c3b508",
												"exec": [
													"pm.variables.set(\"userEmail\", new Date().getTime()+\"@gmail.com\");",
													"console.log(pm.variables.get(\"userEmail\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{userEmail}}\" ,\n\t\"password\": \"katdog12\",\n\t\"phone\": \"+12345+47890\",\n\t\"name\": \"Super Man\"\n}"
										},
										"url": {
											"raw": "{{host}}/user/register",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "USER Negative POST Login",
							"item": [],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2d88bd1-a1f7-4b8d-bdec-9df40b36b8f7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3972eaac-c639-4454-87a1-6a6d9d52d83b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "USER Negative PATCH Update By Id",
							"item": [
								{
									"name": "Update-empty Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('API not found');  \t\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-Id length is 23",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \"5cbf6cee8ef896000466818\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User update error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userId\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-Id length is 25",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \"5cbf6cee8ef896000466818\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User update error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userId\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-Id with special symbols",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \"5cbf6cee8e!896000466818\");",
													"console.log(pm.variables.get(\"UserId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User update error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userId\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-Id with special symbol '%'",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \"5cbf6cee8e%896000466818\");",
													"console.log(pm.variables.get(\"UserId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User update error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userId\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-Id with space in beginning",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \" 5bf6cee8ef896000466818\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User update error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userId\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-Id with space in a center",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \" 5bf6cee8ef 96000466818\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User update error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userId\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-nonexistent Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \"5cbf6cee8ef896000466818f\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User not found');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal(pm.variables.get(\"userId\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-nonexistent Id with space in the end",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \"5cbf6cee8ef8960004668187 \");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User not found');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal(pm.variables.get(\"userId\").trim());\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update-Id with any letter different than 'a-f'",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a6ede-ddcf-4fef-9d75-1e6bf60f7922",
												"exec": [
													"pm.variables.set(\"userId\", \"5cbf6cee8ef896000g668187\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46d443fa-3feb-4e58-919f-b75b7332c6fc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User update error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userId\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2d88bd1-a1f7-4b8d-bdec-9df40b36b8f7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3972eaac-c639-4454-87a1-6a6d9d52d83b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "USER Negative DELETE By Id",
							"item": [
								{
									"name": "Delete - Id length is 23",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													"pm.variables.set(\"userID\", \"5cbf6cee8ef896000466818\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User Delete By Id error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about incorrect user id\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userID\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete - Id length is 25",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													"pm.variables.set(\"userID\", \"5cbf6cee8ef89600046681811\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User Delete By Id error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about incorrect user id\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userID\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete - Id with special symbols",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													"pm.variables.set(\"userID\", \"5cbf6ce$8ef8>60004668181\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User Delete By Id error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about incorrect user id\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userID\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete - Id with space in beginning",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													"pm.variables.set(\"userID\", \" 5cbf6cee8ef896000466818\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User Delete By Id error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about incorrect user id\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userID\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete - Id with space in center",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													"pm.variables.set(\"userID\", \"5cbf6cee8ef8960 00466818\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User Delete By Id error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about incorrect user id\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userID\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete - nonexistent id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													"pm.variables.set(\"userID\", \"5cbf6cee8ef896000466818f\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User not found');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about nonexistent user id\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal(pm.variables.get(\"userID\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete - nonexistent Id with space in end",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													"pm.variables.set(\"userID\", \"5cbf6cee8ef8960004668181  \");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User not found');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about nonexistent user id\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal(pm.variables.get(\"userID\").trim());\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userID}}"
											]
										},
										"description": "Spaces in the end of id should be deleted"
									},
									"response": []
								},
								{
									"name": "Delete - id with letter after \"f\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													"pm.variables.set(\"userID\", \"5cbf6cee8ef8960004g68181\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('User Delete By Id error');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about incorrect user id\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"userID\")+'\" at path \"_id\" for model \"User\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/{{userID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												"{{userID}}"
											]
										},
										"description": "userId can use numbers and letters a-f Upper and LowerCase."
									},
									"response": []
								},
								{
									"name": "Delete - id length is 0",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f00c841b-0e6b-49cf-9843-8c5d44f79633",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01a2215a-c615-436e-9f7b-4b35c3c093c1",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('API not found');  \t\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/user/",
											"host": [
												"{{host}}"
											],
											"path": [
												"user",
												""
											]
										},
										"description": "userId can use numbers and letters a-f Upper and LowerCase."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2d88bd1-a1f7-4b8d-bdec-9df40b36b8f7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3972eaac-c639-4454-87a1-6a6d9d52d83b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "GROUP",
			"item": [
				{
					"name": "GROUP Positive",
					"item": [
						{
							"name": "GROUP Positive POST Create",
							"item": [
								{
									"name": "Create - 'accessType' = members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
												"exec": [
													"pm.test(\"Successful CREATE request\", function () {\r    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r});\r             \rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group created')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac81f525-1cd2-4fcb-988c-a2017830707d",
												"exec": [
													"",
													"pm.variables.set(\"groupName\", \"Travel to space - \" + new Date().getTime());",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{groupName}}\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'accessType' = all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
												"exec": [
													"pm.test(\"Successful CREATE request\", function () {\r    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r});\r             \rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group created')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac81f525-1cd2-4fcb-988c-a2017830707d",
												"exec": [
													"pm.variables.set(\"groupName\", \"Travel to space - \" + new Date().getTime());",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{groupName}}\",\n\t\"accessType\": \"all\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create -  'description' field is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
												"exec": [
													"pm.test(\"Successful CREATE request\", function () {\r    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r});\r             \rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group created')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac81f525-1cd2-4fcb-988c-a2017830707d",
												"exec": [
													"pm.variables.set(\"groupName\", \"Travel to space - \" + new Date().getTime());",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{groupName}}\",\n\t\"accessType\": \"all\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create -  'description' field is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
												"exec": [
													"pm.test(\"Successful CREATE request\", function () {\r    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r});\r             \rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group created')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac81f525-1cd2-4fcb-988c-a2017830707d",
												"exec": [
													"pm.variables.set(\"groupName\", \"Travel to space - \" + new Date().getTime());",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{groupName}}\",\n\t\"accessType\": \"all\",\n\t\"description\": \"\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' length is 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
												"exec": [
													"pm.test(\"Successful CREATE request\", function () {\r    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r});\r             \rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group created')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3a29f09d-2396-4ec2-9ca6-7007cf2a10e9",
												"exec": [
													"let text=\"\";",
													"let charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
													"",
													"    for( var i=0; i < 2; i++ ) {",
													"        text += charset.charAt(Math.floor(Math.random() * charset.length));",
													"    }",
													"",
													"",
													"pm.variables.set(\"groupName\", text);",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{groupName}}\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' length is 255 contains letters (a-z, A-Z) and spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
												"exec": [
													"pm.test(\"Successful CREATE request\", function () {\r    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r});\r             \rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group created')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48688007-00b9-4056-b8f7-21dfd9fdf483",
												"exec": [
													"let text=\"\";",
													"let charset = \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
													"",
													"    for( var i=0; i < 255; i++ ) {",
													"        text += charset.charAt(Math.floor(Math.random() * charset.length));",
													"    }",
													"",
													"",
													"pm.variables.set(\"groupName\", text);",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{groupName}}\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' length is 255 contains letters and sp. symb.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
												"exec": [
													"pm.test(\"Successful CREATE request\", function () {\r    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r});\r             \rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group created')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d018babb-5e9c-4683-b46c-be278fa876e2",
												"exec": [
													"let text=\"\";",
													"let charset = \"abcdefghijkl!@$%^&*()_ +=ABCDEFGHIJKL\";",
													"",
													"    for( var i=0; i < 255; i++ ) {",
													"        text += charset.charAt(Math.floor(Math.random() * charset.length));",
													"    }",
													"",
													"",
													"pm.variables.set(\"groupName\", text);",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{groupName}}\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' length is 255 contains numbers (0-9)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
												"exec": [
													"pm.test(\"Successful CREATE request\", function () {\r    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r});\r             \rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Message exists\", function () {\r    pm.expect(jsonData.message).to.not.be.undefined;\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group created')  \t\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "31e39594-a5fe-43c8-9d89-39d1663f7ba4",
												"exec": [
													"let numb=\"\";",
													"let charset = \"0123456789\";",
													"",
													"    for( var i=0; i < 255; i++ ) {",
													"        numb += charset.charAt(Math.floor(Math.random() * charset.length));",
													"    }",
													"",
													"",
													"pm.variables.set(\"groupName\", parseInt(numb));",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{groupName}}\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c912046-f652-475a-80d5-756733e08df9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});\r\rconst jsonData = pm.response.json();\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group is found')  \t\r});\r\rpm.test(\"Payload is not an empty object\", function () {\r    for (let key in this.payload){\r        pm.expect(this.payload.key).to.not.be.empty;\r    }\r});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/group/5cbf6cee8ef8960004668186",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										"5cbf6cee8ef8960004668186"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77087a6d-3584-4ddb-9840-6adeadd462dd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Groups are showed')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty array\", function () {",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
											"});",
											"",
											"pm.test(\"Each Element in payload is a Group\", function () {",
											"    for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].description).to.not.be.undefined;",
											"        pm.expect(jsonData.payload[i].members).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].accessType).to.be.oneOf(['all', 'members']); ",
											"        pm.expect(jsonData.payload[i].owner).to.not.to.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"    }",
											" }); "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"userId\": \"5cac0dd66d728800049e331a\",\n}"
								},
								"url": {
									"raw": "{{host}}/group/",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea0e2def-7c1b-44cc-b0a1-a3677a84ce96",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});\r\rconst jsonData = pm.response.json();\r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Group updated successfully.')  \t\r});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Homebodies\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for house rest\",\n\t\"owner\": \"5caaa23fc3d26e00049736e1\"\n}\n"
								},
								"url": {
									"raw": "{{host}}/group/5cbf6cee8ef8960004668186",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										"5cbf6cee8ef8960004668186"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GROUP Negative",
					"item": [
						{
							"name": "GROUP Negative POST Create",
							"item": [
								{
									"name": "Create - empty request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: Access type must be specified, owner: Owner id must be specified, name: Name is required');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - all required fields are missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: Access type must be specified, owner: Owner id must be specified, name: Name is required');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"nameless group\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' field is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f2d8c9a-58dc-44bd-98d1-86ee938d300c",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing 'name'\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Name is required');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' is not a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(true);\r",
													"    pm.expect(jsonData.fail).to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group created');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid name\", function () {  \r",
													"    pm.expect(jsonData.payload).is.not.undefined;\r",
													"    pm.expect(jsonData.payload.length).is.eql(24);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6cdd469e-9e47-4ac5-9012-213524f50ee4",
												"exec": [
													"pm.variables.set(\"groupName\", new Date().getTime());",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": \"all\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a5c649d-f468-4b77-9108-22a9e258fd77",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing 'name'\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Name is required');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' with spaces at edges (not unique)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a5c649d-f468-4b77-9108-22a9e258fd77",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about non unique name\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Group name must be unique');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "de67eb12-bbc3-4917-9692-716868d586e8",
												"exec": [
													"pm.variables.set(\"groupName\", \" Travelers \");",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										},
										"description": "Name has spaces, but because they are trimmed and rest part of name was registered before, this name is considered as not unique"
									},
									"response": []
								},
								{
									"name": "Create - 'name' with spaces at edges (unique)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a5c649d-f468-4b77-9108-22a9e258fd77",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 201 Created\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is successful\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(true);\r",
													"    pm.expect(jsonData.fail).to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message is Group created\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group created');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Payload contains correct group Id\", function () {  \r",
													"    pm.expect(jsonData.payload).is.not.undefined;\r",
													"    pm.expect(jsonData.payload.length).is.eql(24);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "de67eb12-bbc3-4917-9692-716868d586e8",
												"exec": [
													"pm.variables.set(\"groupName\", \"  QA fans\" + new Date().getTime() + \"   \");",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										},
										"description": "Spaces should be trimed and group should be created"
									},
									"response": []
								},
								{
									"name": "Create - 'name' length is 256 (more than limit)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid name\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d48d1873-3e7c-42ea-a9d3-927034342237",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"The wdio command line interface comes with a nice configuration utility that helps you to create your config file in less than a minute. It also gives an overview of all available 3rd party packages like framework adaptions, reporter and services and inggg\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' length is 1 (less than limit)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid name\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d48d1873-3e7c-42ea-a9d3-927034342237",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"S\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'name' contains non latin symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid name\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f648db6f-93dc-4a1e-a845-ec207914a296",
												"exec": [
													"pm.variables.set(\"groupName\", \"Имя of group\" + new Date().getTime());",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' field is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing owner\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Owner id must be specified');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd1ddd07-d0f9-4aea-a872-20d42f7e39f0",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"",
													"console.log(pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' is not a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.variables.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.variables.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb4cad85-45b0-4819-91f0-bb5d7e73913d",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupOwner\", 123456789012345678901234);",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupOwner: \" + pm.variables.get(\"groupOwner\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing owner\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.variables.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.variables.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9b42d545-0faa-4d7c-b35a-619bb56308f1",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupOwner\", \"\");",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupOwner: \" + pm.variables.get(\"groupOwner\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' is not registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"/*pm.test(\"Specific error message is about missing accessType\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('');\r",
													"});*/\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5ae1639b-ff2b-4b18-b60d-659d54cb29b2",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupOwner\", \"5cac0d59aa8e4ed7bf85de70\");",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupOwner: \" + pm.variables.get(\"groupOwner\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' length is 25 (more than limit)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.variables.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.variables.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb4cad85-45b0-4819-91f0-bb5d7e73913d",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupOwner\", \"5cac0d59aa8e4ed7bf85de607\");",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupOwner: \" + pm.variables.get(\"groupOwner\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' contains cyrillic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.variables.get(\"groupOwner\") + '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.variables.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53868246-d7d0-4251-84b2-9637313f7519",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupOwner\", \"01234567890123456789тест\");",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupOwner: \" + pm.variables.get(\"groupOwner\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' contains special char",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.variables.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.variables.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "63aba90b-35fd-49bd-b37b-0acb40fc38f5",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupOwner\", \"01234567890123456789&*]+\");",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupOwner: \" + pm.variables.get(\"groupOwner\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' contains space",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.variables.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.variables.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd581047-361d-4c9a-8a14-1e1d2f7350fb",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupOwner\", \"12345 67890 12345 67890 \");",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupOwner: \" + pm.variables.get(\"groupOwner\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'owner' with letter after \"f\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.variables.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.variables.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd581047-361d-4c9a-8a14-1e1d2f7350fb",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupOwner\", \"5cba6cee8ed8960004g68181\");",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupOwner: \" + pm.variables.get(\"groupOwner\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'accessType' field is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing accessType\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: Access type must be specified');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3cbbd21e-af9a-410f-9598-e6fd61fdc836",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'accessType' is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing accessType\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: Access type must be specified');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5ae1639b-ff2b-4b18-b60d-659d54cb29b2",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": \"\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'accessType' is random string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid accessType\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: `'+ pm.variables.get(\"groupAccessType\") +'` is not a valid enum value for path `accessType`.');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17a84f68-44ad-40b6-9fed-7d2b09bed4d7",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupAccessType\", \"random\");",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupAccessType: \" + pm.variables.get(\"groupAccessType\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": \"{{groupAccessType}}\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - 'accessType' is not a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about invalid accessType\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: `'+ pm.variables.get(\"groupAccessType\") +'` is not a valid enum value for path `accessType`.');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17a84f68-44ad-40b6-9fed-7d2b09bed4d7",
												"exec": [
													"pm.variables.set(\"groupName\", \"QA3 fans\" + new Date().getTime());",
													"pm.variables.set(\"groupAccessType\", 123);",
													"",
													"console.log(\"groupName: \" + pm.variables.get(\"groupName\"));",
													"console.log(\"groupAccessType: \" + pm.variables.get(\"groupAccessType\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": {{groupAccessType}}\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e45df210-86d1-45af-b65a-61b9e0b31e89",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5b8be457-cce8-4a81-909c-7fd1e1f9b0e5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GROUP Negative GET All",
							"item": [
								{
									"name": "Get All - invalid userId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ab2ace0-4444-40dc-ad5d-cb868d1eda9e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"  pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"  pm.expect(jsonData.success).to.eql(false);\r",
													"  pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is 'Group get all error'\", function () {\r",
													"  pm.expect(jsonData.message).to.equal('Group get all error');\r",
													"});\r",
													"\r",
													"pm.test(\"Invalid field is 'userId'\", function () {\r",
													"  pm.expect(jsonData.payload.errors.name).is.exist;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\t\"userId\": \"123456789\"\r}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GROUP Negative GET By Id",
							"item": [],
							"_postman_isSubFolder": true
						},
						{
							"name": "GROUP Negative PATCH Update By Id",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "EVENT",
			"item": [
				{
					"name": "EVENT Positive",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Successful CREATE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event created')  \t",
											"});",
											"",
											"pm.test(\"Payload is not an empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Body includes eventId\", function () {",
											"    pm.expect(pm.response.text()).to.include('eventId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep01\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Events are showed')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty array\", function () {",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
											"});",
											"",
											"pm.test(\"Each element in payload is an event\", function () {",
											"    for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].description).to.not.be.undefined;",
											"        pm.expect(jsonData.payload[i].members).to.be.an('array').that.is.lengthOf.above(0);",
											"        pm.expect(jsonData.payload[i].date).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].active).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].owner).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].location).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});\r\rconst jsonData = pm.response.json();\r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('The event is found')  \t\r});\r\rpm.test(\"Payload is not an empty object\", function () {\r    for (let key in this.payload){\r        pm.expect(this.payload.key).to.not.be.empty;     \r    }\r});\r"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/5cbfe88a2d075a00049a2ab5",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cbfe88a2d075a00049a2ab5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});    \r\rconst jsonData = pm.response.json();\r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Event updated')  \t\r});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Hiking\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/5cb6aa252fb9480004d0f77f",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cb6aa252fb9480004d0f77f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r}); \r\rconst jsonData = pm.response.json();\r\rpm.test(\"Correct response message\", function () {  \rpm.expect(jsonData.message).to.equal('Event deleted successfully')  \t\r});      \r\rpm.test(\"Success is true\", function () {\r        pm.expect(jsonData.success).to.eql(true);\r        pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Payload exists\", function () {\r    pm.expect(jsonData.payload).to.not.be.undefined;\r});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/5cbcd30588fe3c0004859574",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cbcd30588fe3c0004859574"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "EVENT Negative",
					"item": [
						{
							"name": "EVENT Negative POST Create",
							"item": [
								{
									"name": "Create - name field is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"             ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Message exists\", function () {",
													"    pm.expect(jsonData.message).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {  ",
													"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
													"});",
													"",
													"pm.test(\"Payload is not empty string\", function () {",
													"        pm.expect(jsonData.payload).to.not.be.empty;     ",
													"});",
													"",
													"pm.test(\"Payload matches message\", function () {",
													"    pm.expect(jsonData.payload).to.include('Event validation failed: name: Path `name` is required.');",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"Sacramento\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - owner field is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"             ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Message exists\", function () {",
													"    pm.expect(jsonData.message).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {  ",
													"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
													"});",
													"",
													"pm.test(\"Payload is not empty object\", function () {",
													"    for (let key in this.payload){",
													"        pm.expect(this.payload.key).to.not.be.empty;     ",
													"    }",
													"});",
													"",
													"pm.test(\"Payload matches message\", function () {",
													"    pm.expect(pm.response.text()).to.include('Event validation failed');",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"\",\n\t\"location\": \"Sacramento\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - owner id is changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"             ",
													"const jsonData = pm.response.json();",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Message exists\", function () {",
													"    pm.expect(jsonData.message).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {  ",
													"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
													"});",
													"",
													"pm.test(\"Payload is not empty object\", function () {",
													"    for (let key in this.payload){",
													"        pm.expect(this.payload.key).to.not.be.empty;     ",
													"    }",
													"});",
													"",
													"pm.test(\"Payload matches message\", function () {  ",
													"    pm.expect(jsonData.payload).to.include('Event validation failed')  \t",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb\",\n\t\"location\": \"Sacramento\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - location field is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"             ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Message exists\", function () {",
													"    pm.expect(jsonData.message).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {  ",
													"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
													"});",
													"",
													"pm.test(\"Payload is not empty object\", function () {",
													"    for (let key in this.payload){",
													"        pm.expect(this.payload.key).to.not.be.empty;     ",
													"    }",
													"});",
													"",
													"pm.test(\"Payload matches message\", function () {",
													"    pm.expect(jsonData.payload).to.include('Event validation failed: location: Path `location` is required.');",
													"});",
													"",
													"pm.test(\"Response time is less than 5000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"create"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EVENT Negative GET All",
							"item": [],
							"_postman_isSubFolder": true
						},
						{
							"name": "EVENT Negative GET By Id",
							"item": [
								{
									"name": "Get - event ID does not exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52c016dd-d3ff-4ff8-ba52-4e14a73cb537",
												"exec": [
													"pm.variables.set(\"eventId\", \"5cbfe88a2d075a00949a2ab5\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66999ac7-0bd6-4c73-a0d4-595bd3ce53bd",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"             ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {",
													"    pm.expect(jsonData.message).to.equal('No event for provided id')  \t",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get - event ID is 23 (less than possible)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52c016dd-d3ff-4ff8-ba52-4e14a73cb537",
												"exec": [
													"pm.variables.set(\"eventId\", \"5cbfe88a2d075a00049a2ab\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66999ac7-0bd6-4c73-a0d4-595bd3ce53bd",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"             ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {",
													"    pm.expect(jsonData.message).to.equal('Incorrect event id')  \t",
													"});",
													"",
													"pm.test(\"Specific error message is about missing required fields\", function () {  ",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"eventId\")+'\" at path \"_id\" for model \"Event\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get - event ID is 25 (more than possible)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52c016dd-d3ff-4ff8-ba52-4e14a73cb537",
												"exec": [
													"pm.variables.set(\"eventId\", \"5cbfe88a2d075a00049a2ab54\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66999ac7-0bd6-4c73-a0d4-595bd3ce53bd",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"             ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {",
													"    pm.expect(jsonData.message).to.equal('Incorrect event id')  \t",
													"});",
													"",
													"pm.test(\"Specific error message is about missing required fields\", function () {  ",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"eventId\")+'\" at path \"_id\" for model \"Event\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get - event ID with a space at the beginnig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52c016dd-d3ff-4ff8-ba52-4e14a73cb537",
												"exec": [
													"pm.variables.set(\"eventId\", \" 5cbfe88a2d075a00049a2ab5\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66999ac7-0bd6-4c73-a0d4-595bd3ce53bd",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"             ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {",
													"    pm.expect(jsonData.message).to.equal('Incorrect event id')  \t",
													"});",
													"",
													"pm.test(\"Specific error message is about missing required fields\", function () {  ",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"eventId\")+'\" at path \"_id\" for model \"Event\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get - event ID with a space at the center",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52c016dd-d3ff-4ff8-ba52-4e14a73cb537",
												"exec": [
													"pm.variables.set(\"eventId\", \"5cbfe88a2 d075a00049a2ab5\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66999ac7-0bd6-4c73-a0d4-595bd3ce53bd",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"             ",
													"pm.test(\"Success is false\", function () {",
													"    pm.expect(jsonData.success).to.eql(false);",
													"    pm.expect(jsonData.fail).to.eql(true);",
													"});",
													"",
													"pm.test(\"Correct response message\", function () {",
													"    pm.expect(jsonData.message).to.equal('Incorrect event id')  \t",
													"});",
													"",
													"pm.test(\"Specific error message is about missing required fields\", function () {  ",
													"    pm.expect(jsonData.payload).to.equal('Cast to ObjectId failed for value \"'+ pm.variables.get(\"eventId\")+'\" at path \"_id\" for model \"Event\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b4604ae-0588-403f-8a67-5c1496839fb8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a3b4850-ffb1-4e62-8ca7-1947ed07337a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EVENT Negative PATCH Update By Id",
							"item": [
								{
									"name": "Update - 'name' length is 1 (less than limit)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 500\", function () {\r    pm.response.to.have.status(500);\r});    \r\rpm.test(\"Success is false\", function () {\r    pm.expect(jsonData.success).to.eql(false);\r    pm.expect(jsonData.fail).to.eql(true);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Incorrect request or event id')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", \"1\");",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'name' length is 251 (more than limit)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 500\", function () {\r    pm.response.to.have.status(500);\r});    \r\rpm.test(\"Success is false\", function () {\r    pm.expect(jsonData.success).to.eql(false);\r    pm.expect(jsonData.fail).to.eql(true);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Incorrect request or event id')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", 'a'.repeat(251));",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(\"eventName\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'name' contains cyrillic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 500\", function () {\r    pm.response.to.have.status(500);\r});    \r\rpm.test(\"Success is false\", function () {\r    pm.expect(jsonData.success).to.eql(false);\r    pm.expect(jsonData.fail).to.eql(true);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Incorrect request or event id')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", 'абвг'+ new Date().getTime());",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'name'  is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 500\", function () {\r    pm.response.to.have.status(500);\r});    \r\rpm.test(\"Success is false\", function () {\r    pm.expect(jsonData.success).to.eql(false);\r    pm.expect(jsonData.fail).to.eql(true);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Incorrect request or event id')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", '');",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'name'  is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});    \r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Event updated')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", true);",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'name'  is object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});    \r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Event updated')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", {sdsa:'asds'});",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'name'  is array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});    \r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Event updated')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", [1,\"testing\"]);",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventName\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'description'  is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 500\", function () {\r    pm.response.to.have.status(500);\r});    \r\rpm.test(\"Success is false\", function () {\r    pm.expect(jsonData.success).to.eql(false);\r    pm.expect(jsonData.fail).to.eql(true);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Incorrect request or event id')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", \"coding\");",
													"pm.variables.set(\"eventDescription\", \"\");",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventDescription\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"{{eventDescription}}\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'description'  is object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});    \r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Event updated')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", \"coding\");",
													"pm.variables.set(\"eventDescription\", {testing: \"testing123\"});",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventDescription\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"{{eventDescription}}\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'description'  is array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});    \r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Event updated')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", \"coding\");",
													"pm.variables.set(\"eventDescription\", [1,'2323']);",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventDescription\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"{{eventDescription}}\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update - 'description'  is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5917dc0-ae28-4851-9910-28fc070c81f2",
												"exec": [
													"const jsonData = pm.response.json();\r\rpm.test(\"Status code is 200\", function () {\r    pm.response.to.have.status(200);\r});    \r\rpm.test(\"Success is true\", function () {\r    pm.expect(jsonData.success).to.eql(true);\r    pm.expect(jsonData.fail).to.eql(false);\r});\r\rpm.test(\"Correct response message\", function () {  \r    pm.expect(jsonData.message).to.equal('Event updated')  \t\r});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53383f4-c88c-4280-8ff3-50199bfa0355",
												"exec": [
													"pm.variables.set(\"eventName\", \"coding\");",
													"pm.variables.set(\"eventDescription\", true);",
													"pm.variables.set(\"eventId\", \"5cb6aa252fb9480004d0f77f\");",
													"console.log(pm.variables.get(\"eventDescription\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{eventName}}\",\n\t\"description\": \"{{eventDescription}}\",\n\t\"location\": \"New location\"\n}"
										},
										"url": {
											"raw": "{{host}}/event/{{eventId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"{{eventId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EVENT Negative DELETE By Id",
							"item": [
								{
									"name": "Delete By Id - owner id is changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});          \r",
													"\r",
													"pm.test(\"Correct response message\", function () {  \r",
													"pm.expect(jsonData.message).to.equal('Delete event error')  \t\r",
													"});      \r",
													"\r",
													"\r",
													"pm.test(\"Fail is true\", function () {\r",
													"        pm.expect(jsonData.success).to.eql(false);\r",
													"        pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Message exists\", function () {\r",
													"    pm.expect(jsonData.message).to.not.be.undefined;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Payload is not empty object\", function () {\r",
													"    for (let key in this.payload){\r",
													"        pm.expect(this.payload.key).to.not.be.empty;     \r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/event/5cbf45848ef89600046681",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												"5cbf45848ef89600046681"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete By Id - owner field is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});          \r",
													"\r",
													"pm.test(\"Correct response message\", function () {  \r",
													"pm.expect(jsonData.message).to.equal('API not found')  \t\r",
													"});      \r",
													"\r",
													"\r",
													"pm.test(\"Fail is true\", function () {\r",
													"        pm.expect(jsonData.success).to.eql(false);\r",
													"        pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Message exists\", function () {\r",
													"    pm.expect(jsonData.message).to.not.be.undefined;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Payload is not empty object\", function () {\r",
													"    for (let key in this.payload){\r",
													"        pm.expect(this.payload.key).to.not.be.empty;     \r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/event/",
											"host": [
												"{{host}}"
											],
											"path": [
												"event",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b4604ae-0588-403f-8a67-5c1496839fb8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a3b4850-ffb1-4e62-8ca7-1947ed07337a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a57f4767-e5f5-4381-a46b-3dfa49ee0043",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51b35811-65cf-4a06-9a94-d400ff07c028",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8072b217-d8eb-4a25-8a6f-074f71f9f7fd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d4b33023-998f-4bc0-9173-c26f6e5c95d8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8f111255-b578-4c36-a3bd-4c0932f72f19",
			"key": "userEmail",
			"value": "",
			"type": "string"
		},
		{
			"id": "3fe257f2-a3b7-46de-9262-c330120e3b10",
			"key": "userID",
			"value": "",
			"type": "string"
		},
		{
			"id": "ac8c9860-9f9b-44d6-8c6c-88308844be36",
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"id": "1924371e-4311-4d77-b38b-d5d91bddf474",
			"key": "groupName",
			"value": "",
			"type": "string"
		},
		{
			"id": "361fdcf8-47c2-4d0e-a7fa-20f2370515e1",
			"key": "groupOwner",
			"value": "",
			"type": "string"
		},
		{
			"id": "d23d85da-7d29-47cf-b3ca-2c8fa3e61439",
			"key": "groupAccessType",
			"value": "",
			"type": "string"
		},
		{
			"id": "1ff7f3c6-4e90-4737-8afa-06d776560081",
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"id": "e7d0cedd-552b-4b36-b2dd-029ddc6a46f5",
			"key": "eventName",
			"value": "",
			"type": "string"
		},
		{
			"id": "24a76786-25c6-4e12-aff9-a3dbe9274710",
			"key": "eventDescription",
			"value": "",
			"type": "string"
		},
		{
			"id": "e57b89c9-df55-4f14-8cff-bb1c719fead2",
			"key": "userPassword",
			"value": "",
			"type": "string"
		},
		{
			"id": "540a5300-5992-4315-9ce2-6d2b8fa86f8d",
			"key": "userPhone",
			"value": "",
			"type": "string"
		},
		{
			"id": "6bd842c2-9554-4c71-a057-58486b8b9a8b",
			"key": "userName",
			"value": "",
			"type": "string"
		}
	]
}
