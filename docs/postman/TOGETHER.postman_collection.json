{
	"info": {
		"_postman_id": "1e6bafcf-f6ef-4a67-ba97-5bf884cbfbcc",
		"name": "TOGETHER",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "USER",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json(); ",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {                   ",
											"    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t",
											"});",
											"pm.test(\"Response is success\", function () { ",
											"    pm.expect(jsonData.success).to.equal(true)  \t       ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"abfgc@gmail.com\",\n\t\"password\": \"abc123\",\n\t\"phone\": \"+17075901867\",\n\t\"name\": \"John Doe\"\n}"
								},
								"url": {
									"raw": "{{host}}/user/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											" pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											"    const jsonData = pm.response.json(); ",
											"    pm.test(\"Success is true\", function () {",
											"        pm.expect(jsonData.success).to.eql(true);",
											"        pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"    pm.test(\"Correct response message\", function () {  ",
											"        pm.expect(jsonData.message).to.equal('User Get All')  \t",
											"});",
											"                  ",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Payload is not empty array\", function () {",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
											"});",
											"",
											" pm.test(\"Each Element is User\", function () {",
											"        for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].password).to.be.undefined;",
											"        pm.expect(jsonData.payload[i].emailConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].phoneConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].resetPassword.history).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].roles).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].active).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].email).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].phone).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].__v).to.equal(0) ;",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json(); ",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('User Get By Id')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"        for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].password).to.be.undefined;",
											"        pm.expect(jsonData.payload[i].emailConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].phoneConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].resetPassword.history).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].roles).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].active).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].email).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].phone).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].__v).to.equal(0) ;",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user/5cac105e0d004247601dc772",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"5cac105e0d004247601dc772"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});          \r",
											"\r",
											"pm.test(\"Correct response message\", function () {  \r",
											"pm.expect(jsonData.message).to.equal('User deleted successfully')  \t\r",
											"});      \r",
											"\r",
											"pm.test(\"Payload is empty object\", function () {\r",
											"    for (let key in this.payload){\r",
											"        pm.expect(this.payload.key).to.be.empty;     \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"        pm.expect(jsonData.success).to.eql(true);\r",
											"        pm.expect(jsonData.fail).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user/5cac10496d728800049e3326",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"5cac10496d728800049e3326"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Register error (gerenal)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db0ae8c6-c942-41fb-810d-208cca9ce41e",
										"exec": [
											"pm.test(\"Correct Error message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal(\"User was not created\")  \t",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "GROUP",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
										"exec": [
											"pm.test(\"Successful CREATE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Group created')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"groupId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Travelers\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
								},
								"url": {
									"raw": "{{host}}/group/",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77087a6d-3584-4ddb-9840-6adeadd462dd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Groups are showed')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty array\", function () {",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
											"});",
											"",
											"pm.test(\"Each Element is Group\", function () {",
											"    for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].description).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].members).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].owner).to.not.to.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"    }",
											" }); "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"userId\": \"5cac0dd66d728800049e331a\",\n}"
								},
								"url": {
									"raw": "{{host}}/group/",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c912046-f652-475a-80d5-756733e08df9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('The group is found')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/group/5cac1b245575322c90bff2f0",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										"5cac1b245575322c90bff2f0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea0e2def-7c1b-44cc-b0a1-a3677a84ce96",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Group updated')  \t",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Homebodies\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for house rest\",\n\t\"owner\": \"5caaa23fc3d26e00049736e1\"\n}\n"
								},
								"url": {
									"raw": "{{host}}/group/5cac1b245575322c90bff2f0",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										"5cac1b245575322c90bff2f0"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
                      {
                        "name": "Get All by userId",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "57e70dfe-da24-4daf-9eec-5e0eb3cfb403",
                              "exec": [
                                "const jsonData = pm.response.json();",
                                "",
                                "pm.test(\"Request code is 500\", function () {",
                                "  pm.expect(pm.response.code).to.eql(500);",
                                "});",
                                "",
                                "pm.test(\"Request is failed\", function () {",
                                "  pm.expect(jsonData.success).to.eql(false);",
                                "  pm.expect(jsonData.fail).to.eql(true);",
                                "});",
                                "",
                                "pm.test(\"Error message is 'Group get all error'\", function () {",
                                "  pm.expect(jsonData.message).to.equal('Group get all error');",
                                "});",
                                "",
                                "pm.test(\"Invalid field is 'userId'\", function () {",
                                "  pm.expect(jsonData.payload.errors.name).is.exist;",
                                "});"
                              ],
                              "type": "text/javascript"
                            }
                          }
                        ],
                        "protocolProfileBehavior": {
                          "disableBodyPruning": true
                        },
                        "request": {
                          "method": "GET",
                          "header": [
                            {
                              "key": "Content-Type",
                              "name": "Content-Type",
                              "value": "application/json",
                              "type": "text"
                            }
                          ],
                          "body": {
                            "mode": "raw",
                            "raw": "{\n\t\"userId\": \"123456789\"\n}"
                          },
                          "url": {
                            "raw": "{{host}}/group/",
                            "host": [
                              "{{host}}"
                            ],
                            "path": [
                              "group",
                              ""
                            ]
                          }
                        },
                        "response": []
                      },
                      {
							"name": "Create",
							"item": [
								{
									"name": "name",
									"item": [
										{
											"name": "Create - 'name' field is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f2d8c9a-58dc-44bd-98d1-86ee938d300c",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about missing 'name'\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: No name');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' is not a string",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": 123,\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": \"all\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' is empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9a5c649d-f468-4b77-9108-22a9e258fd77",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about missing 'name'\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: No name');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' is not unique",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9a5c649d-f468-4b77-9108-22a9e258fd77",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about non unique name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Error, expected `name` to be unique. Value: `'+ pm.environment.get(\"groupName\")+'`');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "de67eb12-bbc3-4917-9692-716868d586e8",
														"exec": [
															"pm.environment.set(\"groupName\", \"Travelers\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' length is 16 (more than limit)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d48d1873-3e7c-42ea-a9d3-927034342237",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"Sixteensymb\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' starts with digit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "631d81ff-a94e-48b3-a57c-106b73b9d397",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000); // 5 digits",
															"",
															"pm.environment.set(\"groupName\", String(num) + \"digitFirst\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' starts with special symbols",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4529e8f7-1a32-46fd-bb30-0e285b67d40e",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000); // 5 digits",
															"",
															"pm.environment.set(\"groupName\", \"*specSym\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' starts with non latin symbols",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c54f3e02-4dcf-4d92-816a-e8ddaefa5110",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000); // 5 digits",
															"",
															"pm.environment.set(\"groupName\", \"ЯnonLatin\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' starts with lower case",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "083d2dee-344a-4f9d-af12-86753ccda1df",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000); // 5 digits",
															"",
															"pm.environment.set(\"groupName\", \"lowercase\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' starts with space",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "512c6dae-7f63-450e-a68d-d8c12ac0a2ae",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000); // 5 digits",
															"",
															"pm.environment.set(\"groupName\", \" Spacefirst\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' contains special symbols",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f648db6f-93dc-4a1e-a845-ec207914a296",
														"exec": [
															"let num = (Math.floor(Math.random() * (1000 - 100)) + 100); // 3 digits",
															"",
															"pm.environment.set(\"groupName\", \"S!-&%*(_$#@.\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'name' contains non latin symbols",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid name\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: Incorrect name format');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f648db6f-93dc-4a1e-a845-ec207914a296",
														"exec": [
															"let num = (Math.floor(Math.random() * (1000 - 100)) + 100); // 3 digits",
															"",
															"pm.environment.set(\"groupName\", \"SКириллица\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'owner' field is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about missing owner\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: No owner');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cd1ddd07-d0f9-4aea-a872-20d42f7e39f0",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "01d4c256-f3bf-4e38-97ce-2b5d5f4c2fc1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "54d820fc-15c6-4414-bc0f-8c246d2614fc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "owner",
									"item": [
										{
											"name": "Create - 'owner' field is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about missing owner\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: No owner');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cd1ddd07-d0f9-4aea-a872-20d42f7e39f0",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"accessType\": \"members\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'owner' is not a string",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.environment.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.environment.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "eb4cad85-45b0-4819-91f0-bb5d7e73913d",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));",
															"pm.environment.set(\"groupOwner\", 123456789012345678901234);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'owner' is empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about missing owner\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: No owner');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9b42d545-0faa-4d7c-b35a-619bb56308f1",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"\",\r\n\t\"accessType\": \"members\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'owner' length is 25 (more than limit)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.environment.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.environment.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "eb4cad85-45b0-4819-91f0-bb5d7e73913d",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));",
															"pm.environment.set(\"groupOwner\", \"5cac0d59aa8e4ed7bf85de607\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'owner' contains cyrillic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.environment.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.environment.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "53868246-d7d0-4251-84b2-9637313f7519",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));",
															"pm.environment.set(\"groupOwner\", \"01234567890123456789тест\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'owner' contains special char",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.environment.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.environment.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "63aba90b-35fd-49bd-b37b-0acb40fc38f5",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));",
															"pm.environment.set(\"groupOwner\", \"01234567890123456789&*]+\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'owner' contains space",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid owner\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: owner: Cast to ObjectID failed for value \\\"' + pm.environment.get(\"groupOwner\")+ '\\\" at path \\\"owner\\\", members: Cast to Array failed for value \\\"[ \\'' + pm.environment.get(\"groupOwner\")+ '\\' ]\\\" at path \\\"members\\\"');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cd581047-361d-4c9a-8a14-1e1d2f7350fb",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));",
															"pm.environment.set(\"groupOwner\", \"123456789012345678 space\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"{{groupOwner}}\",\r\n\t\"accessType\": \"members\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "accessType",
									"item": [
										{
											"name": "Create - 'accessType' field is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about missing accessType\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: No access type');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3cbbd21e-af9a-410f-9598-e6fd61fdc836",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'accessType' is empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about missing accessType\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: No access type');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5ae1639b-ff2b-4b18-b60d-659d54cb29b2",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'accessType' is random string",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid accessType\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: `'+ pm.environment.get(\"groupAccessType\") +'` is not a valid enum value for path `accessType`.');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "17a84f68-44ad-40b6-9fed-7d2b09bed4d7",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));",
															"pm.environment.set(\"groupAccessType\", \"random\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": \"random\"\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'accessType' is not a string",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"pm.test(\"Specific error message is about invalid accessType\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: accessType: `'+ pm.environment.get(\"groupAccessType\") +'` is not a valid enum value for path `accessType`.');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "17a84f68-44ad-40b6-9fed-7d2b09bed4d7",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));",
															"pm.environment.set(\"groupAccessType\", 123);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": {{groupAccessType}}\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "members",
									"item": [
										{
											"name": "Create - 'members' contains not a string",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"/*pm.test(\"Specific error message is about invalid members\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: members: ????');\r",
															"});*/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0fe3e24e-87cd-4351-813e-e29ec8db8bd0",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": \"all\",\r\n\t\"members\": [89]\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Create - 'members' contains invalid strings",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da23313b-b572-487b-8995-a0f917a43c5e",
														"exec": [
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Request code is 500\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(500);\r",
															"});\r",
															"\r",
															"pm.test(\"Request is failed\", function () {\r",
															"    pm.expect(jsonData.success).to.eql(false);\r",
															"    pm.expect(jsonData.fail).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Prime error message is correct\", function () {  \r",
															"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
															"});\r",
															"\r",
															"/*pm.test(\"Specific error message is about invalid members\", function () {  \r",
															"    pm.expect(jsonData.payload).to.equal('Group validation failed: members: ????');\r",
															"});*/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "045f1a78-738f-4309-abc8-2be3ef178a69",
														"exec": [
															"let num = (Math.floor(Math.random() * (100000 - 10000)) + 10000);",
															"",
															"pm.environment.set(\"groupName\", \"QA3 fans\" + String(num));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"name\": \"{{groupName}}\",\r\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de70\",\r\n\t\"accessType\": \"all\",\r\n\t\"members\": [[],\"5cac0d59aa8e4ed7bf85de6070\",\"5\",\"%$&()-=+\",\"лпватло\"]\r\n}"
												},
												"url": {
													"raw": "{{host}}/group/",
													"host": [
														"{{host}}"
													],
													"path": [
														"group",
														""
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create - empty request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: No name, accessType: No access type, owner: No owner');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create - all required fields are missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da23313b-b572-487b-8995-a0f917a43c5e",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Request code is 500\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Request is failed\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"    pm.expect(jsonData.fail).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Prime error message is correct\", function () {  \r",
													"    pm.expect(jsonData.message).to.equal('Group was not created.');  \t\r",
													"});\r",
													"\r",
													"pm.test(\"Specific error message is about missing required fields\", function () {  \r",
													"    pm.expect(jsonData.payload).to.equal('Group validation failed: name: No name, accessType: No access type, owner: No owner');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"nameless group\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/group/",
											"host": [
												"{{host}}"
											],
											"path": [
												"group",
												""
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "EVENT",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Successful CREATE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event created')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include('eventId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Successful CREATE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event created')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include('eventId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Hiking\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/5cb6aa252fb9480004d0f77f",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cb6aa252fb9480004d0f77f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/5cb0bc417dd8f697d84bc52d",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cb0bc417dd8f697d84bc52d"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/5cb0bc637dd8f697d84bc52e",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cb0bc637dd8f697d84bc52e"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create name field is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"             ",
											"pm.test(\"Success is false\", function () {",
											"    pm.expect(jsonData.success).to.eql(false);",
											"    pm.expect(jsonData.fail).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty string\", function () {",
											"        pm.expect(jsonData.payload).to.not.be.empty;     ",
											"});",
											"",
											"pm.test(\"Payload matches message\", function () {",
											"    pm.expect(jsonData.payload).to.include('Event validation failed: name: Path `name` is required.');",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create owner field is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"             ",
											"pm.test(\"Success is false\", function () {",
											"    pm.expect(jsonData.success).to.eql(false);",
											"    pm.expect(jsonData.fail).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Payload matches message\", function () {",
											"    pm.expect(pm.response.text()).to.include('Event validation failed');",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create owner id is changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is false\", function () {",
											"    pm.expect(jsonData.success).to.eql(false);",
											"    pm.expect(jsonData.fail).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Payload matches message\", function () {  ",
											"    pm.expect(jsonData.payload).to.include('Event validation failed')  \t",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create location field is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"             ",
											"pm.test(\"Success is false\", function () {",
											"    pm.expect(jsonData.success).to.eql(false);",
											"    pm.expect(jsonData.fail).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Payload matches message\", function () {",
											"    pm.expect(jsonData.payload).to.include('Event validation failed: location: Path `location` is required.');",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8072b217-d8eb-4a25-8a6f-074f71f9f7fd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d4b33023-998f-4bc0-9173-c26f6e5c95d8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
