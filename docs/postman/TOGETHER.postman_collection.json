{
	"info": {
		"_postman_id": "1e6bafcf-f6ef-4a67-ba97-5bf884cbfbcc",
		"name": "TOGETHER",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "USER",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json(); ",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {                   ",
											"    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t",
											"});",
											"pm.test(\"Response is success\", function () { ",
											"    pm.expect(jsonData.success).to.equal(true)  \t       ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"abfgc@gmail.com\",\n\t\"password\": \"abc123\",\n\t\"phone\": \"+17075901867\",\n\t\"name\": \"John Doe\"\n}"
								},
								"url": {
									"raw": "{{host}}/user/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											" pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											"    const jsonData = pm.response.json(); ",
											"    pm.test(\"Success is true\", function () {",
											"        pm.expect(jsonData.success).to.eql(true);",
											"        pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"    pm.test(\"Correct response message\", function () {  ",
											"        pm.expect(jsonData.message).to.equal('User Get All')  \t",
											"});",
											"                  ",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Payload is not empty array\", function () {",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
											"});",
											"",
											" pm.test(\"Each Element is User\", function () {",
											"        for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].password).to.be.undefined;",
											"        pm.expect(jsonData.payload[i].emailConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].phoneConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].resetPassword.history).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].roles).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].active).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].email).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].phone).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].__v).to.equal(0) ;",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json(); ",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('User Get By Id')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"        for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].password).to.be.undefined;",
											"        pm.expect(jsonData.payload[i].emailConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].phoneConfirmation.confirmed).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i].resetPassword.history).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].roles).to.be.an('array');",
											"        pm.expect(jsonData.payload[i].active).to.be.a('boolean');",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].email).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].phone).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].__v).to.equal(0) ;",
											"    }",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user/5cac105e0d004247601dc772",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"5cac105e0d004247601dc772"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});          \r",
											"\r",
											"pm.test(\"Correct response message\", function () {  \r",
											"pm.expect(jsonData.message).to.equal('User deleted successfully')  \t\r",
											"});      \r",
											"\r",
											"pm.test(\"Payload is empty object\", function () {\r",
											"    for (let key in this.payload){\r",
											"        pm.expect(this.payload.key).to.be.empty;     \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"        pm.expect(jsonData.success).to.eql(true);\r",
											"        pm.expect(jsonData.fail).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/user/5cac10496d728800049e3326",
									"host": [
										"{{host}}"
									],
									"path": [
										"user",
										"5cac10496d728800049e3326"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Register error (gerenal)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db0ae8c6-c942-41fb-810d-208cca9ce41e",
										"exec": [
											"pm.test(\"Correct Error message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal(\"User was not created\")  \t",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "GROUP",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
										"exec": [
											"pm.test(\"Successful CREATE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Group created')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"groupId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Travelers\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
								},
								"url": {
									"raw": "{{host}}/group/",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77087a6d-3584-4ddb-9840-6adeadd462dd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Groups are showed')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty array\", function () {",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
											"});",
											"",
											"pm.test(\"Each Element is Group\", function () {",
											"    for(let i = 0; i < jsonData.payload.length; i++){",
											"        pm.expect(jsonData.payload[i]).to.be.an('object');",
											"        pm.expect(jsonData.payload[i].description).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].members).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].owner).to.not.to.be.empty;",
											"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
											"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
											"    }",
											" }); "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"userId\": \"5cac0dd66d728800049e331a\",\n}"
								},
								"url": {
									"raw": "{{host}}/group/",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c912046-f652-475a-80d5-756733e08df9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('The group is found')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/group/5cac1b245575322c90bff2f0",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										"5cac1b245575322c90bff2f0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea0e2def-7c1b-44cc-b0a1-a3677a84ce96",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Group updated')  \t",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Homebodies\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for house rest\",\n\t\"owner\": \"5caaa23fc3d26e00049736e1\"\n}\n"
								},
								"url": {
									"raw": "{{host}}/group/5cac1b245575322c90bff2f0",
									"host": [
										"{{host}}"
									],
									"path": [
										"group",
										"5cac1b245575322c90bff2f0"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "EVENT",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Successful CREATE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event created')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include('eventId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Successful CREATE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"    pm.expect(jsonData.fail).to.eql(false);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event created')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include('eventId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Hiking\",\n\t\"description\": \"New description\",\n\t\"location\": \"New location\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/5cb6aa252fb9480004d0f77f",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cb6aa252fb9480004d0f77f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/5cb0bc417dd8f697d84bc52d",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cbf9cf58ef89600046681f6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Correct response message\", function () {  \r",
											"pm.expect(jsonData.message).to.equal('Event deleted successfully')  \t\r",
											"});      \r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"        pm.expect(jsonData.success).to.eql(true);\r",
											"        pm.expect(jsonData.fail).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"payload\");\r",
											"});\r",
											"\r",
											"pm.test(\"Payload exists\", function () {\r",
											"    pm.expect(jsonData.payload).to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});          \r",
											"\r",
											"pm.test(\"Correct response message\", function () {  \r",
											"pm.expect(jsonData.message).to.equal('Event deleted successfully')  \t\r",
											"});      \r",
											"\r",
											"pm.test(\"Payload is empty object\", function () {\r",
											"    for (let key in this.payload){\r",
											"        pm.expect(this.payload.key).to.be.empty;     \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"        pm.expect(jsonData.success).to.eql(true);\r",
											"        pm.expect(jsonData.fail).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Message exists\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.undefined;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Payload is not empty object\", function () {\r",
											"    for (let key in this.payload){\r",
											"        pm.expect(this.payload.key).to.not.be.empty;     \r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/event/5cbf9cf58ef89600046681f6",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"5cbf9cf58ef89600046681f6"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create name field is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"             ",
											"pm.test(\"Success is false\", function () {",
											"    pm.expect(jsonData.success).to.eql(false);",
											"    pm.expect(jsonData.fail).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty string\", function () {",
											"        pm.expect(jsonData.payload).to.not.be.empty;     ",
											"});",
											"",
											"pm.test(\"Payload matches message\", function () {",
											"    pm.expect(jsonData.payload).to.include('Event validation failed: name: Path `name` is required.');",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create owner field is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"             ",
											"pm.test(\"Success is false\", function () {",
											"    pm.expect(jsonData.success).to.eql(false);",
											"    pm.expect(jsonData.fail).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Payload matches message\", function () {",
											"    pm.expect(pm.response.text()).to.include('Event validation failed');",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create owner id is changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"             ",
											"const jsonData = pm.response.json();",
											"pm.test(\"Success is false\", function () {",
											"    pm.expect(jsonData.success).to.eql(false);",
											"    pm.expect(jsonData.fail).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Payload matches message\", function () {  ",
											"    pm.expect(jsonData.payload).to.include('Event validation failed')  \t",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb\",\n\t\"location\": \"Sacramento\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create location field is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"             ",
											"pm.test(\"Success is false\", function () {",
											"    pm.expect(jsonData.success).to.eql(false);",
											"    pm.expect(jsonData.fail).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message exists\", function () {",
											"    pm.expect(jsonData.message).to.not.be.undefined;",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {  ",
											"    pm.expect(jsonData.message).to.equal('Event create error')  \t",
											"});",
											"",
											"pm.test(\"Payload is not empty object\", function () {",
											"    for (let key in this.payload){",
											"        pm.expect(this.payload.key).to.not.be.empty;     ",
											"    }",
											"});",
											"",
											"pm.test(\"Payload matches message\", function () {",
											"    pm.expect(jsonData.payload).to.include('Event validation failed: location: Path `location` is required.');",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Eating\",\n\t\"description\": \"Eat Eat Sleep\",\n\t\"owner\": \"5caaa03da658254933f2bb27\",\n\t\"location\": \"\"\n}"
								},
								"url": {
									"raw": "{{host}}/event/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"event",
										"create"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8072b217-d8eb-4a25-8a6f-074f71f9f7fd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d4b33023-998f-4bc0-9173-c26f6e5c95d8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}