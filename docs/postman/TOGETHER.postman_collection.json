{
	"info": {
		"_postman_id": "4cdb0e0e-69c9-4b5b-95e8-175022ede9aa",
		"name": "TOGETHER",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "USER",
			"item": [
				{
					"name": "Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "124c70cd-b4c0-4e5d-959a-ef62c2d1ad8e",
								"exec": [
									" pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"});",
									"    const jsonData = pm.response.json(); ",
									"    pm.test(\"Success is true\", function () {",
									"        pm.expect(jsonData.success).to.eql(true);",
									"        pm.expect(jsonData.fail).to.eql(false);",
									"});",
									"",
									"    pm.test(\"Correct response message\", function () {  ",
									"        pm.expect(jsonData.message).to.equal('User Get All')  \t",
									"});",
									"                  ",
									"pm.test(\"Message exists\", function () {",
									"    pm.expect(jsonData.message).to.not.be.undefined;",
									"});",
									"",
									"pm.test(\"Payload is not empty array\", function () {",
									"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
									"});",
									"",
									"pm.test(\"Each Element is User\", function () {",
									"    for(let i = 0; i < jsonData.payload.length; i++){",
									"        pm.expect(jsonData.payload[i]).to.be.an('object');",
									"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
									"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
									"        pm.expect(jsonData.payload[i].email).to.not.be.empty;",
									"        pm.expect(jsonData.payload[i].password).to.be.undefined;",
									"    }",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60818cf6-67b9-4213-a19a-44f2c45c8d66",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"});",
									"const jsonData = pm.response.json(); ",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.fail).to.eql(false);",
									"});",
									"",
									"pm.test(\"Message exists\", function () {",
									"    pm.expect(jsonData.message).to.not.be.undefined;",
									"});",
									"",
									"pm.test(\"Correct response message\", function () {  ",
									"    pm.expect(jsonData.message).to.equal('User Get By Id')  \t",
									"});",
									"",
									"pm.test(\"Payload is not empty object\", function () {",
									"    for (let key in this.payload){",
									"       pm.expect(this.payload.key).to.not.be.empty;     ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/user/5cac0f2d6d728800049e3320",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"5cac0f2d6d728800049e3320"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0acb4ed3-ee39-411a-a1c9-4c592372a003",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"});",
									"const jsonData = pm.response.json(); ",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.fail).to.eql(false);",
									"});",
									"",
									"pm.test(\"Message exists\", function () {",
									"    pm.expect(jsonData.message).to.not.be.undefined;",
									"});",
									"",
									"pm.test(\"Correct response message\", function () {                   ",
									"    pm.expect(jsonData.message).to.equal('User was created successfully. Please check and verify your email')  \t",
									"});",
									"pm.test(\"Response is success\", function () { ",
									"    pm.expect(jsonData.success).to.equal(true)  \t       ",
									"});",
									"",
									"//Negative test",
									"               ",
									"pm.test(\"Correct Error message\", function () {  ",
									"    pm.expect(jsonData.message).to.equal(\"User was not created\")  \t",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"abc@gmail.com\",\n\t\"password\": \"abc123\",\n\t\"phone\": \"+17075901867\",\n\t\"name\": \"John Doe\"\n}"
						},
						"url": {
							"raw": "{{host}}/user/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GROUP",
			"item": [
				{
					"name": "Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77087a6d-3584-4ddb-9840-6adeadd462dd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.fail).to.eql(false);",
									"});",
									"",
									"pm.test(\"Message exists\", function () {",
									"    pm.expect(jsonData.message).to.not.be.undefined;",
									"});",
									"",
									"pm.test(\"Correct response message\", function () {  ",
									"    pm.expect(jsonData.message).to.equal('Groups are showed')  \t",
									"});",
									"",
									"pm.test(\"Payload is not empty array\", function () {",
									"    pm.expect(jsonData.payload).to.be.an('array').that.is.lengthOf.above(0);",
									"});",
									"",
									"pm.test(\"Each Element is Group\", function () {",
									"    for(let i = 0; i < jsonData.payload.length; i++){",
									"        pm.expect(jsonData.payload[i]).to.be.an('object');",
									"        pm.expect(jsonData.payload[i].description).to.not.be.empty;",
									"        pm.expect(jsonData.payload[i].members).to.not.be.empty;",
									"        pm.expect(jsonData.payload[i]._id).to.not.be.empty;",
									"        pm.expect(jsonData.payload[i].name).to.not.be.empty;",
									"        pm.expect(jsonData.payload[i].owner).to.not.to.be.empty;",
									"        pm.expect(jsonData.payload[i].createdAt).to.not.be.empty;",
									"        pm.expect(jsonData.payload[i].updatedAt).to.not.be.empty;",
									"    }",
									" }); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"5cac0dd66d728800049e331a\",\n}"
						},
						"url": {
							"raw": "{{host}}/group/",
							"host": [
								"{{host}}"
							],
							"path": [
								"group",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c912046-f652-475a-80d5-756733e08df9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.fail).to.eql(false);",
									"});",
									"",
									"pm.test(\"Message exists\", function () {",
									"    pm.expect(jsonData.message).to.not.be.undefined;",
									"});",
									"",
									"pm.test(\"Correct response message\", function () {  ",
									"    pm.expect(jsonData.message).to.equal('The group is found')  \t",
									"});",
									"",
									"pm.test(\"Payload is not empty object\", function () {",
									"    for (let key in this.payload){",
									"        pm.expect(this.payload.key).to.not.be.empty;     ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/group/5cac1b245575322c90bff2f0",
							"host": [
								"{{host}}"
							],
							"path": [
								"group",
								"5cac1b245575322c90bff2f0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea0e2def-7c1b-44cc-b0a1-a3677a84ce96",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.fail).to.eql(false);",
									"});",
									"",
									"pm.test(\"Message exists\", function () {",
									"    pm.expect(jsonData.message).to.not.be.undefined;",
									"});",
									"",
									"pm.test(\"Correct response message\", function () {  ",
									"    pm.expect(jsonData.message).to.equal('Group updated')  \t",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Homebodies\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for house rest\",\n\t\"owner\": \"5caaa23fc3d26e00049736e1\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/group/5cac1b245575322c90bff2f0",
							"host": [
								"{{host}}"
							],
							"path": [
								"group",
								"5cac1b245575322c90bff2f0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afb101b0-2572-4982-8d01-afc5f3364ebe",
								"exec": [
									"pm.test(\"Successful CREATE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"             ",
									"const jsonData = pm.response.json();",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.fail).to.eql(false);",
									"});",
									"",
									"pm.test(\"Message exists\", function () {",
									"    pm.expect(jsonData.message).to.not.be.undefined;",
									"});",
									"",
									"pm.test(\"Correct response message\", function () {  ",
									"    pm.expect(jsonData.message).to.equal('Group created')  \t",
									"});",
									"",
									"pm.test(\"Payload is not empty object\", function () {",
									"    for (let key in this.payload){",
									"        pm.expect(this.payload.key).to.not.be.empty;     ",
									"    }",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"groupId\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Travelers\",\n\t\"accessType\": \"members\",\n\t\"description\": \"Group for the travel\",\n\t\"owner\": \"5cac0d59aa8e4ed7bf85de60\"\n}"
						},
						"url": {
							"raw": "{{host}}/group/",
							"host": [
								"{{host}}"
							],
							"path": [
								"group",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	]
}